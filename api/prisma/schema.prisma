datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  @@map("users")
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  username    String?
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  active      Boolean   @default(true)
  //  1-1
  config      Config?
  //  1-N
  favorites   Favorite[]
  attempts    Attempt[]
  feedbacks   Feedback[]
  role        Role      @default(USER)
}

model Config {
  @@map("configs")
  id          String    @id @default(cuid())
  files       String
  //  1-1
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
}

model Favorite {
  @@map("favorites")
  id          String    @id @default(cuid())
  note        String?
  //  1-1
  question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?   @unique
  //  N-1
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Test {
  @@map("tests")
  id          String    @id @default(cuid())
  title       String
  score       Int
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
  testCategory TestCategory
  testSkill   TestSkill
  //  1-N
  attempts    Attempt[]
  questions   Question[]
  //  N-1
  testSource  TestSource @relation(fields: [testSourceId], references: [id])
  testSourceId String     
}

model TestSource {
  @@map("test_sources")
  id          String    @id @default(cuid())
  name        String     @unique
  // 1-N
  tests       Test[]
}

model Attempt {
  @@map("attempts")
  id          String    @id @default(cuid())
  score       Int
  status      AttemptStatus      @default(NONE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
  //  N-1
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  test        Test     @relation(fields: [testId], references: [id])
  testId      String
}

model Question {
  @@map("questions")
  id          String    @id @default(cuid())
  content     String
  //  1-1
  favorite    Favorite?
  feedback    Feedback?
  //  N-1
  test        Test     @relation(fields: [testId], references: [id])
  testId      String   
  //  1-N
  choices     Choice[]
}

model Choice {
  @@map("choices")
  id          String    @id @default(cuid())
  content     String
  //  N-1
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String   
}

model Feedback {
  @@map("feedbacks")
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
  //  1-1
  question    Question  @relation(fields: [questionId], references: [id])
  questionId  String    @unique
  //  N-1
  user        User     @relation(fields: [userId], references: [id])
  userId      String   
}

enum Role {
  ADMIN
  USER
}

enum AttemptStatus {
  NONE
  INPROGRESS
  FINISHED
  ABANDONED
}

enum TestCategory {
  PART1
  PART2
  PART3
  PART4
  PART5
  PART6
  PART7
  FULLTEST
}

enum TestSkill {
  LISTENING
  READING
}